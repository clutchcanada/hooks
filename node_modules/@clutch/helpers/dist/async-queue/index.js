"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var R = _interopRequireWildcard(require("ramda"));

var _throwError = require("../throwError");

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(functionQueue);

function functionQueue(asyncFunctionArray) {
  var i, result;
  return _regenerator["default"].wrap(function functionQueue$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          i = 0;

        case 1:
          if (!(i < asyncFunctionArray.length)) {
            _context.next = 8;
            break;
          }

          result = asyncFunctionArray[i]();
          _context.next = 5;
          return {
            result: result,
            index: i
          };

        case 5:
          i++;
          _context.next = 1;
          break;

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

;

var asyncQueue = function asyncQueue(_ref) {
  var asyncFunctionArray = _ref.asyncFunctionArray,
      _ref$concurrentCount = _ref.concurrentCount,
      concurrentCount = _ref$concurrentCount === void 0 ? 1 : _ref$concurrentCount;
  var queue = functionQueue(asyncFunctionArray);
  var results = [];
  var canceled = false;
  var processing = false;

  var _onResult = function onResult() {};

  var _onError = function onError() {};

  var getNextResultFromQueue =
  /*#__PURE__*/
  function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var result, queueResponse, resultPromise;
      return _regenerator["default"].wrap(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              queueResponse = queue.next();
              resultPromise = R.pathOr(Promise.resolve(), ["value", "result"], queueResponse);
              _context2.next = 5;
              return resultPromise;

            case 5:
              result = _context2.sent;
              _context2.next = 11;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              result = {
                error: _context2.t0
              };

            case 11:
              return _context2.abrupt("return", {
                done: queueResponse.done,
                value: result,
                index: R.path(["value", "index"], queueResponse)
              });

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    return function getNextResultFromQueue() {
      return _ref2.apply(this, arguments);
    };
  }();

  var handleQueueResult = function handleQueueResult(queueResult) {
    results[queueResult.index] = queueResult.value;
    !queueResult.value.error && _onResult({
      result: queueResult.value,
      allResults: [].concat(results),
      index: queueResult.index
    });
    queueResult.value.error && _onError({
      error: queueResult.value.error,
      allResults: [].concat(results),
      index: queueResult.index
    });
  };

  var worker =
  /*#__PURE__*/
  function () {
    var _ref3 = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      var queueResult;
      return _regenerator["default"].wrap(function _callee2$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!canceled) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", false);

            case 2:
              _context3.next = 4;
              return getNextResultFromQueue();

            case 4:
              queueResult = _context3.sent;

              if (!queueResult.done) {
                _context3.next = 7;
                break;
              }

              return _context3.abrupt("return", false);

            case 7:
              handleQueueResult(queueResult);
              return _context3.abrupt("return", worker());

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee2);
    }));

    return function worker() {
      return _ref3.apply(this, arguments);
    };
  }();

  var process =
  /*#__PURE__*/
  function () {
    var _ref4 = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee3() {
      var workers;
      return _regenerator["default"].wrap(function _callee3$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              processing && (0, _throwError.throwError)("Queue is already processing");
              canceled = false;
              processing = true;
              workers = (0, _toConsumableArray2["default"])(new Array(concurrentCount)).map(worker);
              _context4.next = 6;
              return Promise.all(workers);

            case 6:
              processing = false;
              return _context4.abrupt("return", [].concat(results));

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee3);
    }));

    return function process() {
      return _ref4.apply(this, arguments);
    };
  }();

  return {
    process: process,
    onResult: function onResult(fn) {
      _onResult = fn;
    },
    onError: function onError(fn) {
      _onError = fn;
    },
    cancel: function cancel() {
      canceled = true;
    }
  };
};

var _default = asyncQueue;
exports["default"] = _default;